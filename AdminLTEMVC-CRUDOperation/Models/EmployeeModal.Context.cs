//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdminLTEMVC_CRUDOperation.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EmployeeDBModal : DbContext
    {
        public EmployeeDBModal()
            : base("name=EmployeeDBModal")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
    
        public virtual int spDeleteEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteEmployee", employeeIDParameter);
        }
    
        public virtual ObjectResult<spGetAllEmployees_Result> spGetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllEmployees_Result>("spGetAllEmployees");
        }
    
        public virtual ObjectResult<Employee> spInsertEmployeeDetails(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spInsertEmployeeDetails", employeeIDParameter);
        }
    
        public virtual ObjectResult<Employee> spInsertEmployeeDetails(Nullable<int> employeeID, MergeOption mergeOption)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spInsertEmployeeDetails", mergeOption, employeeIDParameter);
        }
    
        public virtual int spUpdateEmployee(Nullable<int> employeeID, string employeeName, string employeeGender, string employeeDesignation)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var employeeGenderParameter = employeeGender != null ?
                new ObjectParameter("EmployeeGender", employeeGender) :
                new ObjectParameter("EmployeeGender", typeof(string));
    
            var employeeDesignationParameter = employeeDesignation != null ?
                new ObjectParameter("EmployeeDesignation", employeeDesignation) :
                new ObjectParameter("EmployeeDesignation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmployee", employeeIDParameter, employeeNameParameter, employeeGenderParameter, employeeDesignationParameter);
        }
    }
}
